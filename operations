#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
struct node{
int x;
struct node *right;
struct node *left;
};
typedef struct node node ;
node *newnode(int key)
{
node *temp=(node *)malloc(sizeof(node));
temp->left=NULL;
temp->right=NULL;
temp->x=key;
return temp;
}
node *insert(node *root,int key)
{
if(root==NULL)
return newnode(key);
else if(key<root->x)                 // if the element is lesser than the root it goes to the left subtree
root->left=insert(root->left,key);
else if(key>root->x)                 // if the element is greater than the root it goes to the right subtree
root->right=insert(root->right,key); 
return root;
}
node *FindMin(node *t)  // if we want to replace a node from its right subtree we should find the minimum element of the right subtree so in changing those values the bst rules wont change
{
while(t->left)
t=t->left;
return t;
}
node *delete(node *root,int key)
{
if(root==NULL)
return root;
else if(key<root->x)
root->left=delete(root->left,key);
else if(key>root->x)
root->right=delete(root->right,key);
else
{
if(root->left==NULL && root->right==NULL) // if no child
{
free(root);
root=NULL;
return root;
}
else if(root->left==NULL) // if only right child , change the values and delete
{ 
node *temp=root;
root=root->right;
free(temp);
return root;
}
else if(root->right==NULL)  // if only left child , change the values and delete
{
node *temp=root;
root=root->left;
free(temp);
return root;
}
else // if it has two children , here I have taken the right side and exchanged the value with the least element from its right subtree.
{
node *temp=FindMin(root->right);
root->x=temp->x;
root->right=delete(root->right,temp->x);
}
}
return root;
}
int main()
{
int n;
node *root=null;
scanf("%d",&n);
for(i=0;i<n;i++)
{
int val;
scanf("%d",&val);
root=insert(root,val);
}
}
